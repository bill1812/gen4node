<% if (view) { -%>
// app.modules
<% Object.keys(modules).sort().forEach(function (variable) { -%>
<%- varconst %> <%- variable %> = require('<%- modules[variable] %>');
<% }); -%>

// app.localModules
<% Object.keys(localModules).sort().forEach(function (variable) { -%>
<%- varconst %> <%- variable %> = require('<%- localModules[variable] %>');
<% }); -%>

// app.localVariable
<% Object.keys(localVariable).sort().forEach(function (variable) { -%>
<%- varconst %> <%- variable %> = <%- localVariable[variable] %>;
<% }); -%>

// app.localLetVar
<% Object.keys(localLetVar).sort().forEach(function (variable) { -%>
<%- letVar %> <%- variable %> = <%- localLetVar[variable] %>;
<% }); -%>
<% } -%>
// app.disable('x-powered-by');

// app.uses
<% uses.forEach(function (use) { -%>
app.use(<%- use %>);
<% }); -%>

// app.mounts
<% mounts.forEach(function (mount) { -%>
app.use(<%= mount.path %>, <%- mount.code %>);
<% }); -%>

<% if (view) { -%>
// view engine setup @app.view.render
<% if (view.render) { -%>
app.engine('<%- view.engine %>', <%- view.render %>);
<% } -%>

// app.view.engine
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', '<%- view.engine %>');
<% } -%>

<% if (view) { -%>
// catch 404 and forward to error handler
app.use(<%- genFunc(['req', 'res', 'next']) %> {
  next(createError(404));
});

// error handler
app.use(<%- genFunc(['err', 'req', 'res', 'next']) %> {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);

  <%- varconst %> theErr = [
    req.app.get('env'),
    res.statusCode.toString()
  ];
  // console.log('\ntheErr[0]: ' + theErr[0] + ' theErr[1]: ' + theErr[1] +'\n');
  // console.log('res.locals.message: ' + res.locals.message + '\n');
  // console.log('res.locals.error: '   + res.locals.error   + '\n');
  // console.log('err: ' + err + '\n');

  if (theErr[0] === 'development') {
    res.render('error');
  } else {
<% if (es6) { -%>
    //  build-in! ES6 support
    var htmlhead = `<!DOCTYPE html><html lang="en"><head><title>Error</title><link rel="shortcut icon" type="image/x-icon" href="/img/error.ico" /><style type="text/css">html{font-family: sans-serif;line-height: 1.15;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%}body{margin: 0}small{font-size: 80%}body, html{width: 100%;height: 100%;background-color: #21232a}body{color: #fff;text-align: center;text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);padding: 0;min-height: 100%;-webkit-box-shadow: inset 0 0 100px rgba(0, 0, 0, 0.8);box-shadow: inset 0 0 100px rgba(0, 0, 0, 0.8);display: table;font-family: "Open Sans", Arial, sans-serif}h1{font-size: 2em;margin: 0.67em 0font-family: inherit;font-weight: 500;line-height: 1.1;color: inherit;font-size: 36px}h1 small{font-size: 68%;font-weight: 400;line-height: 1;color: #777}.lead{color: silver;font-size: 21px;line-height: 1.4}.cover{display: table-cell;vertical-align: middle;padding: 0 20px}</style></head><body><div class="cover">`;
    switch (theErr[1]) {
    case '401':
      res.send(htmlhead + `<h1>Unauthorized <small>Error 401</small></h1><p class="lead">The requested resource requires an authentication.</p></div></body></html>`);
      break;
    case '403':
      res.send(htmlhead + `<h1>Access Denied <small>Error 403</small></h1><p class="lead">The requested resource requires an authentication.</p></div></body></html>`);
      break;
    case '404':
      res.send(htmlhead + `<h1>Resource not found - <small>Error 404</small></h1><p class="lead">The requested resource could not be found but may be available again in the future.</p></div></body></html>`);
      break;
    case '500':
      res.send(htmlhead + `<h1>Webservice currently unavailable - <small>Error 500</small></h1><p class="lead">An unexpected condition was encountered.<br>Our service team has been dispatched to bring it back online.</p></div></body></html>`);
      break;
<% } else { -%>
    //  build-in!
    var htmlhead = '<!DOCTYPE html><html lang="en"><head><title>Error</title><link rel="shortcut icon" type="image/x-icon" href="/img/error.ico" /><style type="text/css">html{font-family: sans-serif;line-height: 1.15;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%}body{margin: 0}small{font-size: 80%}body, html{width: 100%;height: 100%;background-color: #21232a}body{color: #fff;text-align: center;text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);padding: 0;min-height: 100%;-webkit-box-shadow: inset 0 0 100px rgba(0, 0, 0, 0.8);box-shadow: inset 0 0 100px rgba(0, 0, 0, 0.8);display: table;font-family: "Open Sans", Arial, sans-serif}h1{font-size: 2em;margin: 0.67em 0font-family: inherit;font-weight: 500;line-height: 1.1;color: inherit;font-size: 36px}h1 small{font-size: 68%;font-weight: 400;line-height: 1;color: #777}.lead{color: silver;font-size: 21px;line-height: 1.4}.cover{display: table-cell;vertical-align: middle;padding: 0 20px}</style></head><body><div class="cover">';
    switch (theErr[1]) {
    case '401':
      res.send(htmlhead + '<h1>Unauthorized <small>Error 401</small></h1><p class="lead">The requested resource requires an authentication.</p></div></body></html>');
      break;
    case '403':
      res.send(htmlhead + '<h1>Access Denied <small>Error 403</small></h1><p class="lead">The requested resource requires an authentication.</p></div></body></html>');
      break;
    case '404':
      res.send(htmlhead + '<h1>Resource not found - <small>Error 404</small></h1><p class="lead">The requested resource could not be found but may be available again in the future.</p></div></body></html>');
      break;
    case '500':
      res.send(htmlhead + '<h1>Webservice currently unavailable - <small>Error 500</small></h1><p class="lead">An unexpected condition was encountered.<br>Our service team has been dispatched to bring it back online.</p></div></body></html>');
      break;
<% } -%>
    default:
      break;
    }
  // res.render(theErr[1]);
  }
  // next();
});

<% } -%>
module.exports = app;

/* express-generator\templates\js\app.js.ejs */
